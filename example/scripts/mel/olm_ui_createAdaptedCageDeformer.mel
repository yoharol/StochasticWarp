string $clusterNode;
string $obj_shape;
string $cageHandleStrings[];
string $objHandleStrings[];

// get connected node
proc string[] getConnectedNodes(string $node, string $attr,  int $des, int $src)
{
	string $nodes[] = `listConnections -d $des -s $src ($node+"."+$attr)`;
	return $nodes;
}

// get connected node
proc string getConnectedNode(string $node, string $attr,  int $des, int $src)
{
	string $result = "";
	string $nodes[] = `listConnections -d $des -s $src ($node+"."+$attr)`;
	if(size($nodes)>0)
		$result = $nodes[0];
	return $result;
}

proc string getConnectedNodeAttr(string $node, string $attr,  int $des, int $src)
{
	string $result = "";
	string $nodes[] = `listConnections -p 1 -d $des -s $src ($node+"."+$attr)`;
	if(size($nodes)>0)
		$result = $nodes[0];
	return $result;
}

// get parent
proc string getParent(string $node)
{	
	string $ps[] = `listRelatives -fullPath -p $node`;
	return $ps[0];
}

// get child
proc string getOneChild(string $node)
{
	string $ch[] = `listRelatives -fullPath -c $node`;
	return $ch[0];
}

// duplicate a locator
proc string duplicateLocator(string $loc)
{
	string $ds[] = `duplicate $loc`;
	string $d = $ds[0];
	string $ch[] = `listRelatives -fullPath -c $d`;
	for($c in $ch)
	{
		if (`nodeType $c`!="olmTextHandleLocator")
			delete $c;
	}
	if(getParent($d)!="")
	    parent -w $d;
	return $d;
}

// set dummy
proc dummy(string $node)
{
	setAttr ($node+".visibility") 0;
	setAttr -l true  ($node+".translateX");
	setAttr -l true  ($node+".translateY");
	setAttr -l true  ($node+".translateZ");
	setAttr -l true  ($node+".rotateX");
	setAttr -l true  ($node+".rotateY");
	setAttr -l true  ($node+".rotateZ");
	setAttr -l true  ($node+".scaleX");
	setAttr -l true  ($node+".scaleY");
	setAttr -l true  ($node+".scaleZ");
	setAttr -l true  ($node+".shearXY");
	setAttr -l true  ($node+".shearXZ");
	setAttr -l true  ($node+".shearYZ");
}

// examine whether the given mesh is triangular (1) or not (0)
proc int isTriangular(string $mesh)
{
	int $numFaces[] = `polyEvaluate -f $mesh`;
	int $numTriangle[] = `polyEvaluate -t $mesh`;
	if($numFaces[0] == $numTriangle[0]) return 1;
	else return 0;
}

// get shape object
proc string[] getShapes( string $xform )
{
   string $shapes[];
   $shapes[0] = $xform;
   if ( "transform" == `nodeType $xform` )
   {
      $shapes = `listRelatives -fullPath -shapes $xform`;
   }
   return $shapes;
}

// connect attributes
proc connectAttribute(string $srcNode, string $srcAttr, string $tgtNode, string $tgtAttr)
{
	connectAttr ($srcNode+"."+$srcAttr) ($tgtNode+"."+$tgtAttr);
}

// disconnect attributes
proc disconnectAttribute(string $srcNode, string $srcAttr, string $tgtNode, string $tgtAttr)
{
	disconnectAttr ($srcNode+"."+$srcAttr) ($tgtNode+"."+$tgtAttr);
}

// get selected object and cage
proc string[] getTwoSelected()
{
	string $r[];
	string $sl[] = `ls -sl`;
	if(size($sl)!=2)
	{
		confirmDialog -title "Error" -message "Please select two objects" -button "Yes" -button "No"
			-defaultButton "Yes" -cancelButton "No" -dismissString "No";
		$r[0] = "";
		$r[1] = "";
		return $r;
	}
	$r[0] = $sl[0];
	$r[1] = $sl[1];
	return $r;
}

// callback function to set text field with selected objects
global proc setSelectToText_cb(string $objTxt, string $cageTxt)
{
	string $sel[] = getTwoSelected();
	int $t_0[] = `polyEvaluate -t $sel[0]`;
	int $t_1[] = `polyEvaluate -t $sel[1]`;
	if($t_0[0] < $t_1[0])
	{
		string $ans = `confirmDialog -title "Warning" -message "Selection order may be wrong, continue?" -button "Continue" -button "Cancel" 
						     -defaultButton "Continue" -cancelButton "Cancel" -dismissString "No"`;
		if($ans == "Cancel")
			return;
	}
	textField -edit -text $sel[0] $objTxt;
	textField -edit -text $sel[1] $cageTxt;
}

// callback function to Create in MAYA UI
global proc auto_cage_ok()
{
	global string $clusterNode;
	global string $obj_shape;
	global string $cageHandleStrings[];
	global string $objHandleStrings[];
	
	// simply search deformer, not true for multiple deformers 
	string $list[] = `ls -type olmReducedCage`;
	string $reducedCageDeformer = $list[0];
	string $reductionNode = getConnectedNode( $reducedCageDeformer, "mixedInput", 0, 1);
	disconnectAttribute($reductionNode, "reducedOutput", $reducedCageDeformer , "mixedInput");
	delete $reducedCageDeformer;
	//string $autoCageNode = `createNode  olmAutoCageTransform`;
	string $obj = `textField - q -text objectTextField`;
	string $cage = `textField - q -text cageTextField`;
	string $o_cage = getConnectedNode( $reductionNode, "cages[0]", 0, 1);
	string $cage_shapes[] = getShapes($cage);
	string $cage_shape = $cage_shapes[0];
	string $obj_shapes[] = getShapes($obj);
	string $obj_org_shape;
	for ($shape in $obj_shapes)
	{
		if (`getAttr ($shape+".intermediateObject") ` == 0 )
			$obj_shape = $shape;
		else
			$obj_org_shape = $shape;
	}
	
	string $in = getConnectedNodeAttr($obj_shape, "inMesh", 0, 1);
	disconnectAttr $in ($obj_shape+".inMesh");
	select $obj_shape;
	string $defs[] = `deformer -type olmAutoCageTransform`;	
	string $autoCageNode = $defs[0];	
	string $defOutNodeAttr = getConnectedNodeAttr($autoCageNode, "outputGeometry[0]", 1, 0);
	disconnectAttr ($autoCageNode + ".outputGeometry[0]") $defOutNodeAttr;
	// create a clustering node and connect it into dependency graph
	$clusterNode = `createNode olmVertexClusterNode`;
	connectAttribute($reductionNode, "reducedOutput", $clusterNode, "mixedInput");
	connectAttribute($clusterNode, "clusters", $autoCageNode, "clusterIn");
	connectAttribute($o_cage, "worldMesh", $autoCageNode, "cageMeshIn");
	connectAttribute($reductionNode, "reducedOutput", $autoCageNode, "mixedInput");
	
	string $orgs[];
	// cage constraints (strings and handles)
	string $handles[] = `textScrollList -q -allItems cageHandleListTexts`;
	if(size($handles)!=size($cageHandleStrings))
		error "an error occurs to get cage handles.\n";
	int $i=0;
	for($i=0; $i<size($handles); $i++)
	{
		string $hnd = $handles[$i];
		getAttr -type ($autoCageNode+".cageHandleString["+$i+"]");
		getAttr -type ($autoCageNode+".cageHandleMatrix["+$i+"]");
		setAttr ($autoCageNode+".cageHandleString["+$i+"]") -type "string" $cageHandleStrings[$i];
		connectAttribute($hnd, "worldMatrix", $autoCageNode, "cageHandleMatrix["+$i+"]");
		// add an locked original handle
		string $orgHnd = duplicateLocator($hnd);
		select $orgHnd;
		$orgHnd = $hnd+"Org";
		rename $orgHnd;
		dummy($orgHnd);
		getAttr -type ($autoCageNode+".orgCgHndMatrix["+$i+"]");
		connectAttribute($orgHnd, "worldMatrix", $autoCageNode, "orgCgHndMatrix["+$i+"]");
		$orgs[size($orgs)] = $orgHnd;
	}
	
	// object constraints (strings and handles)
	string $handles2[] = `textScrollList -q -allItems objHandleListTexts`;
	if(size($handles2)!=size($objHandleStrings))
		error "an error occurs to get object handles.\n";
	for($i=0; $i<size($handles2); $i++)
	{
		string $hnd = $handles2[$i];
		getAttr -type ($autoCageNode+".objHandleString["+$i+"]");
		getAttr -type ($autoCageNode+".objHandleMatrix["+$i+"]");
		setAttr ($autoCageNode+".objHandleString["+$i+"]") -type "string" $objHandleStrings[$i];
		connectAttribute($hnd, "worldMatrix", $autoCageNode, "objHandleMatrix["+$i+"]");
		// add an locked original handle
		string $orgHnd = duplicateLocator($hnd);
		select $orgHnd;
		$orgHnd = $hnd+"Org";
		rename ($hnd+"Org");
		dummy($orgHnd);
		getAttr -type ($autoCageNode+".orgObjHndMatrix["+$i+"]");
		connectAttribute($orgHnd, "worldMatrix", $autoCageNode, "orgObjHndMatrix["+$i+"]");
		$orgs[size($orgs)] = $orgHnd;
	}
	
	// anchor constraints (locators)
	string $joints[] = `textScrollList -q -allItems jointListTexts`;
	int $num_joint = size($joints);
	for($i=0; $i<$num_joint; $i++)
	{
		string $jt = $joints[$i];
		getAttr -type ($autoCageNode+".joints["+$i+"]");
		connectAttribute($jt, "worldMatrix", $autoCageNode, "joints["+$i+"]");
		string $orgJt = duplicateLocator($jt);
		select $orgJt;
		$orgJt = $jt+"Org";
		rename $orgJt;
		dummy($orgJt);
		getAttr -type ($autoCageNode+".orgAnchMatrix["+$i+"]");
		connectAttribute($orgJt, "worldMatrix", $autoCageNode, "orgAnchMatrix["+$i+"]");
		$orgs[size($orgs)] = $orgJt;
	}
	select -r $orgs;
	group -n "orgConstraints";
	setAttr "orgConstraints.visibility" 0;
	
	// unclose the object?
	int $uncl = `checkBox -q -value openCheckButton`;
	setAttr ($autoCageNode + ".close") $uncl;
	if($uncl)
	{
		string $closed = $obj+"Closed";
		duplicate -n $closed $obj;
		polyCloseBorder -ch 0 $closed;
		setAttr ($closed+".visibility") 0;
		connectAttribute($closed, "worldMesh", $autoCageNode, "closedObj");
	}

	// connect output of autoCageNode to cage
	connectAttr ($autoCageNode + ".outputGeometry[0]") $defOutNodeAttr;
	connectAttribute($autoCageNode, "cageMeshOut", $cage_shape, "inMesh");
	frameLayout -edit -collapse off -enable on ClustersFrame;	
}

proc show_cluster_script(string $cluserNodeName, string $objName, int $id)
{
	int $cluster_num = `getAttr -size ($cluserNodeName+".clusterStrings")`;
	intSliderGrp -edit -maxValue ($cluster_num-1) -fieldMaxValue ($cluster_num-1) clusterIdField;
	string $str = `getAttr ($cluserNodeName + ".clusterStrings[" + $id + "]")`;
	string $buffer[];
	$numTokens = `tokenize  $str " " $buffer`;
	int $i;
	for($i=0; $i<$numTokens; $i++)
		$buffer[$i] = $objName + $buffer[$i];
	select $buffer;
}

global proc show_cluster()
{
	global string $clusterNode;
	global string $obj_shape;
	int $cid = `intSliderGrp -q -value clusterIdField`;
	show_cluster_script($clusterNode, $obj_shape, $cid);
}

proc create_textLocator(string $handleName, string $text, float $r, float $g, float $b, float $x, float $y, float $z)
{
	createNode  transform -n $handleName;
	string $locator = `createNode olmTextHandleLocator -p $handleName`;
	setAttr ($locator+".text") -type "string" $text;
	setAttr ($locator+".color.red") $r;
	setAttr ($locator+".color.green") $g;
	setAttr ($locator+".color.blue") $b;
	setAttr ($handleName+".displayHandle") 1;
	setAttr ($handleName+".translateX") $x;
	setAttr ($handleName+".translateY") $y;
	setAttr ($handleName+".translateZ") $z;
}

// calback to Handled button in MAYA UI
global proc add_handle_cb()
{
	global string $cageHandleStrings[];
	global string $objHandleStrings[];
	string $result = `promptDialog -title "Rename Object" -message "Enter Name:" -button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
	if ($result == "OK") 
	{		
		string $sel[] = `ls -sl`;
		string $cage = `textField -q -text cageTextField`;
		string $obj = `textField -q -text objectTextField`;
		string $buffer[];
		tokenize $sel[0] "." $buffer;
		string $sel_obj = $buffer[0];
		int $isCage;
		if($sel_obj == $cage) $isCage = 1;
		else if($sel_obj == $obj) $isCage = 0;
		else error "selected vertices from a wrong mesh?";
		float $bbox[] = `exactWorldBoundingBox`;	
		float $x =  ($bbox[0]+ $bbox[3])/2;
		float $y =  ($bbox[1]+ $bbox[4])/2;
		float $z =  ($bbox[2]+ $bbox[5])/2;
		string $handleName;
		$text = `promptDialog -query -text`;
		
		if($isCage==1)
		{
			int $hndCount = size($cageHandleStrings);
			$cageHandleStrings[$hndCount] = stringArrayToString($sel," ");
			if($text == "") $handleName = ("cageHandle"+$hndCount);
			else $handleName = $text;
			create_textLocator($handleName, "c", 1.0, 0.0, 0.0, $x, $y, $z);
			textScrollList -edit -append $handleName cageHandleListTexts;
		}		
		else
		{
			int $hndCount = size($objHandleStrings);
			$objHandleStrings[$hndCount] = stringArrayToString($sel," ");
			if($text == "") $handleName = ("objectHandle"+$hndCount);
			else $handleName = $text;
			create_textLocator($handleName, "o", 0.0, 1.0, 0.0, $x, $y, $z);
			textScrollList -edit -append $handleName objHandleListTexts;			
		}
	}	
}

// rename a handle in MAYA
proc rename_handles_cb()
{
	string $sel_items[] = `textScrollList -q -selectItem cageHandleListTexts`;
	if(size($sel_items)==0) error "please select a handle you want to rename.";
	string $sel_item = $sel_items[0]; 
	string $text;
	string $result = `promptDialog -title "Rename Object" -message "Enter Name:" -button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
	if ($result == "OK") 
	{
		$text = `promptDialog -query -text`;
		textScrollList -edit -ri $sel_item cageHandleListTexts;
		textScrollList -edit -append $text cageHandleListTexts;
		rename $sel_item $text ;
	}
}

proc remove_handles_cb(string $name)
{
	if($name == "cage")
	{
		string $sel_items[] = `textScrollList -q -selectItem cageHandleListTexts`;
		textScrollList -edit -ri $sel_items[0] cageHandleListTexts;
		delete $sel_items[0];
	}
	else
	{
		string $sel_items[] = `textScrollList -q -selectItem objHandleListTexts`;
		textScrollList -edit -ri $sel_items[0] objHandleListTexts;
		delete $sel_items[0];
	}		
}

// select a handle in MAYA UI
proc select_handle_cb(string $name)
{
	string $sel;
	if($name == "cage")
	{
		string $sel_hnd[] = `textScrollList -q -selectItem cageHandleListTexts`;
		$sel = $sel_hnd[0];
		textScrollList -e -deselectAll objHandleListTexts;
	}
	else
	{
		string $sel_hnd[] = `textScrollList -q -selectItem objHandleListTexts`;
		$sel = $sel_hnd[0];
		textScrollList -e -deselectAll cageHandleListTexts;
	}
	select $sel;
}

global proc update_handle_cb()
{
	string $locators[] = `ls -type olmTextHandleLocator`;
	textScrollList -edit -removeAll cageHandleListTexts;
	textScrollList -edit -removeAll objHandleListTexts;
	textScrollList -edit -removeAll jointListTexts;
	for($locator in $locators)
	{
		string $xform = getParent($locator);
		if(`getAttr -l ($xform+".translateX")` == 0)
		{
			string $loc_txt = `getAttr ($locator+".text")`;
			if($loc_txt == "c")
				textScrollList -edit -append $xform cageHandleListTexts;
			else if ($loc_txt == "o")
				textScrollList -edit -append $xform objHandleListTexts;
			else if($loc_txt == "a")
				textScrollList -edit -append $xform jointListTexts;
			else
				error "an error occurs when updating handles in this Maya scene.";
		}
	}
	button -edit -enable on removeCageHandleButton;
	button -edit -enable on removeObjHandleButton;
	button -edit -enable on removeJointButton;
}

global proc add_joint_cb()
{	
	string $result = `promptDialog -title "Rename anchor" -message "Enter Name:" 
		-button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" 
		-dismissString "Cancel"`;	
	if ($result == "OK") 
	{
		string $anchor_name = `promptDialog -query -text`;
		if( $anchor_name == "")
		{
			int $num_item =`textScrollList -q -numberOfItems jointListTexts`;
			$anchor_name = "anchor"+$num_item;
		}
		create_textLocator($anchor_name, "a", 0.0, 0.0, 1.0, 0, 0, 0);		
		textScrollList -edit -append $anchor_name jointListTexts;
	}
}

global proc remove_joint_cb()
{
	string $sel_items[] = `textScrollList -q -selectItem jointListTexts`;
	textScrollList -edit -ri $sel_items[0] jointListTexts;
	delete $sel_items[0];
}

global proc select_joint_cb()
{
	string $sels[] = `textScrollList -q -selectItem jointListTexts`;
	string $sel = $sels[0];
	select $sel;
}

// show UI
global proc olm_ui_createAdaptedCageDeformer()
{
	global string $cageHandleStrings[];
	global string $objHandleStrings[];
	clear $cageHandleStrings;
	clear $objHandleStrings;
	if(`window -exists autoCageTransformWindow`==1)
		deleteUI autoCageTransformWindow;
	window -resizeToFitChildren 1 -title "Create Adapted Cage Deformer" autoCageTransformWindow;
	columnLayout;
		frameLayout -label "Object and Cage" -width 400 -borderStyle "out";
			columnLayout;
				rowLayout -numberOfColumns 2;					
					text -label "Object" -width 195 -align "left";	
					text -label "Cage" -width 195 -align "left";					
				setParent ..;
				rowLayout -numberOfColumns 2;	
					textField -width 195 objectTextField;
					textField -width 195 cageTextField;										
				setParent ..;
				button -label "Set" -width 80 -command "setSelectToText_cb objectTextField cageTextField";					
			setParent;
		setParent;
		frameLayout -label "Manipulating Constraints" -borderStyle "out" -width 400; 
			columnLayout;
				button -label "Update" -width 100 -command "update_handle_cb" updateHandleButton;
				rowLayout -numberOfColumns 2;
					text -label "Cage Constraints" -width 195 -align "left";
					text -label "Object Constraints" -width 195 -align "left";
				setParent ..;
				rowLayout -numberOfColumns 2;
					textScrollList -numberOfRows 12 -allowMultiSelection off -width 195 -height 150 
						-selectCommand "select_handle_cb cage" cageHandleListTexts;
					textScrollList -numberOfRows 12 -allowMultiSelection off -width 195 -height 150 
						-selectCommand "select_handle_cb obj" objHandleListTexts;
				setParent..;
				rowLayout -numberOfColumns 6;
					button -label "Handled" -width 95 -command "add_handle_cb" addCageHandleButton;
					button -label "Remove" -width 95 -enable off -command "remove_handles_cb cage" removeCageHandleButton; 
					button -label "Handled" -width 95 -command "add_handle_cb" addObjHandleButton;
					button -label "Remove" -width 95 -enable off -command "remove_handles_cb object" removeObjHandleButton; 
				setParent..;
			setParent..;
		setParent..;
		text -label "Anchor Constraints" -width 195 -align "left";
		columnLayout;
			text -label "Joints" -width 195 -align "left";
			textScrollList -numberOfRows 12 -allowMultiSelection off -width 395 -height 100 
				-selectCommand "select_joint_cb" jointListTexts;
			checkBox -label "open" -value off openCheckButton;
			rowLayout -numberOfColumns 2;
				button -label "Add" -width 100 -command "add_joint_cb" addJointButton;
				button -label "Remove" -enable off -width 100 -command "remove_joint_cb" removeJointButton; 
			setParent..;
		setParent..;
		frameLayout -label "Clusters" -width 400 -collapsable on -collapse on -enable off -borderStyle "out" ClustersFrame;
			columnLayout;
				intSliderGrp -label "Cluster Id" -field true -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 100
					-value 0 -changeCommand "show_cluster" clusterIdField;
				setParent ..;
			setParent ..;
		setParent ..;
		frameLayout -label "Create" -borderStyle "out" -width 400; 
			rowLayout -numberOfColumns 2;
				button -label "OK" -width 80 -command "auto_cage_ok";
				button -label "Cancel" -width 80 -command "deleteUI autoCageTransformWindow";
			setParent ..;		
		setParent ..;		
	setParent ..;	
	showWindow;
};

olm_ui_createAdaptedCageDeformer();