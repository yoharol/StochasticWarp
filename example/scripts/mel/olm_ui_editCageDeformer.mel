//////////////////////////////////////////////////////////////////////////////////////
//
// utility functions
//
//////////////////////////////////////////////////////////////////////////////////////
global string $cageDeformerName_edit;
global int $cage_deformer_edited=0;
// get shape object
global proc string[] getShapes( string $xform )
{
   string $shapes[];
   $shapes[0] = $xform;
   if ( "transform" == `nodeType $xform` )
   {
      $shapes = `listRelatives -fullPath -shapes $xform`;
   }
   return $shapes;
}

// examine whether the given mesh is triangular (1) or not (0)
global proc int isTriangular(string $mesh)
{
	int $numFaces[] = `polyEvaluate -f $mesh`;
	int $numTriangle[] = `polyEvaluate -t $mesh`;
	if($numFaces[0] == $numTriangle[0]) return 1;
	else return 0;
}

// get selected object and cage
global proc string[] getTwoSelected()
{
	string $r[];
	string $sl[] = `ls -sl`;
	if(size($sl)!=2)
	{
		confirmDialog -title "Error" -message "Please select two objects" -button "Yes" -button "No"
			-defaultButton "Yes" -cancelButton "No" -dismissString "No";
		$r[0] = "";
		$r[1] = "";
		return $r;
	}
	$r[0] = $sl[0];
	$r[1] = $sl[1];
	return $r;
}

// get connected node and attribute
global proc string[] getConnection(string $node, string $attr,  int $des, int $src)
{	
	string $results[];
	string $nodes[] = `listConnections -d $des -s $src ($node+"."+$attr)`;
	$results[0] = $nodes[0];
	string $plugs[] = `listConnections -d $des -s $src -p 1 ($node+"."+$attr)`;
	$results[1] = `plugAttr $plugs[0]`;
	return $results;
}

// get connected node
global proc string getConnectedNode(string $node, string $attr,  int $des, int $src)
{
	string $result = "";
	string $nodes[] = `listConnections -d $des -s $src ($node+"."+$attr)`;
	if(size($nodes)>0)
		$result = $nodes[0];
	return $result;
}

// connect attributes
global proc connectAttribute(string $srcNode, string $srcAttr, string $tgtNode, string $tgtAttr)
{
	connectAttr ($srcNode+"."+$srcAttr) ($tgtNode+"."+$tgtAttr);
}

// disconnect attributes
global proc disconnectAttribute(string $srcNode, string $srcAttr, string $tgtNode, string $tgtAttr)
{
	disconnectAttr ($srcNode+"."+$srcAttr) ($tgtNode+"."+$tgtAttr);
}

// get next node with an attribute
global proc string next(string $node, string $attr)
{
	string $to[] = getConnection($node, $attr, 1, 0);
	return $to[0];
}

// find the influence shape of the given deformer
global proc string findInflence(string $deformer)
{
	string $current = $deformer;
	string $next;
	do
	{
		$next = next($current, "outputGeometry");
		$current = $next;
	} while (`nodeType $current`!="transform" );
	return $current;
}

// get all connected node
// return: (in order, IMPORTANT) influence, cage, coord, [reducer, examples.....]
global proc string[] getCageDeformerConnections(string $cageDefm)
{
	string $result[];
	$result[0]= findInflence($cageDefm);
	string $cages[] = getConnection($cageDefm, "cageMesh", 0, 1);
	$result[1] = $cages[0];
	string $from[] = getConnection($cageDefm, "mixedInput", 0, 1);
	string $reducer = "";
	string $coord = "";
	if(`nodeType $from[0]` == "olmWeightReductionNode")
	{
		$reducer = $from[0];
		string $ups[] = getConnection($reducer, "mixedInput", 0, 1);
		$coord = $ups[0];
	}
	else
		$coord = $from[0];
	$result[2] = $coord;
	if($reducer != "")
		$result[3] = $reducer;
	return $result;
}

// get examples for weight reduction
global proc string[] getReducerExamples(string $reducer)
{
	string $result[];
	if($reducer == "")
		return $result;
	if(`nodeType $reducer`!="olmWeightReductionNode")
		error "wrong reduction node given";
	string $cages[] = `listConnections -d 0 -s 1 ($reducer+".cages")`;
	string $poses[] = `listConnections -d 0 -s 1 ($reducer+".poses")`;
	int $len = size($cages);
	int $i;
	for($i=0; $i<$len; $i++)
	{
		$result[2*$i] = $cages[$i];
		$result[2*$i+1] = $poses[$i];
	}
	return $result;
}

// do weight reduction for HC, inserting a weight reduction node between HC node and deformer node(replaced by a new deformer) 
global proc insertWeightReduction(string  $def, int $s, int $type, float $ratio, int $maxLen, string $exp_cages[], string $exp_objects[])
{
	int $len = `size($exp_cages)`;
	if($len!=size($exp_objects))
	{
		confirmDialog -title "Error" -message "Inconsistent numbers of input cages and objects." -button "Yes" -button "No"
			-defaultButton "Yes" -cancelButton "No" -dismissString "No";
		return;
	}
	string $obj = findInflence($def);
	string $cage = getConnectedNode($def, "cageMesh", 0, 1);
	string $coordNode = getConnectedNode($def, "mixedInput", 0, 1);
	string $cage_o = getConnectedNode($coordNode, "cageMesh", 0, 1);
	string $obj_o = getConnectedNode($coordNode, "objectMesh", 0, 1);
	if(`nodeType $coordNode`!="olmHarmonicCoordinates")
	{
		confirmDialog -title "Error" -message "Only available for HC." -button "Yes" -button "No"
			-defaultButton "Yes" -cancelButton "No" -dismissString "No";
		return;
	}
	disconnectAttribute($def, "outputGeometry[0]", $obj, "inMesh");
	disconnectAttribute($cage, "worldMesh[0]", $def, "cageMesh") ;
	disconnectAttribute($coordNode, "mixedOutput", $def, "mixedInput") ;
	int $s0 = `getAttr ($coordNode+".segment")`;
	if($s != $s0) setAttr  ($coordNode+".segment") $s;
	delete $def;
	// create a new deformer
	string $reds[] = `deformer -type olmReducedCage $obj`;
	string $reducedDeformer = $reds[0];	
	connectAttribute($cage, "worldMesh", $reducedDeformer, "cageMesh") ;
	string $reductionNode = `createNode olmWeightReductionNode`;
	setAttr ($reductionNode+".reductionRatio") $ratio;
	setAttr ($reductionNode+".reducerType") $type;
	setAttr ($reductionNode+".maxWeightLen") $maxLen;
	connectAttribute($cage_o, "worldMesh", $reductionNode, "cages[0]");
	connectAttribute($obj_o, "worldMesh", $reductionNode, "poses[0]");
	// connect attributes
	int $i;
	for($i=0; $i<$len; $i++)
	{
		string $cageStr = "cages["+string($i+1)+"]";
		string $poseStr = "poses["+string($i+1)+"]";
		connectAttribute($exp_cages[$i], "worldMesh", $reductionNode, $cageStr);
		connectAttribute($exp_objects[$i], "worldMesh", $reductionNode, $poseStr);
	}
	connectAttribute($coordNode, "mixedOutput", $reductionNode, "mixedInput");	
	connectAttribute($reductionNode, "reducedOutput", $reducedDeformer, "mixedInput");
}

// create a new HC node and a new weight reduction node
global proc createWeightReduction(string $obj, string $cage, int $s, int $type, float $ratio, int $maxLen,
									   string $cages[], string $poses[])
{
	// duplicate
	string $orgObj[] = `duplicate $obj`;
	string $orgCage[] = `duplicate $cage`;
	setAttr ($orgObj[0]+".visibility") 0;
	setAttr ($orgCage[0]+".visibility") 0;
	// if(isTriangular($orgObj[0])==0)
		// polyTriangulate -ch 1 $orgObj[0];
		
	// create a new deformer
	string $def[] = `deformer -type olmReducedCage $obj`;
	string $cageDeformerNode = $def[0];
	
	// create a new coordinate node
	string $coordNode  = `createNode olmHarmonicCoordinates`;	
	setAttr ($coordNode + ".segment") $s;
	setAttr ($coordNode + ".solver") 0;	
	setAttr ($coordNode + ".enclose") 1;
	
	// create a new weight reduction node
	string $reductionNode = `createNode olmWeightReductionNode`;
	setAttr ($reductionNode+".reductionRatio") $ratio;
	setAttr ($reductionNode+".reducerType") $type;
	setAttr ($reductionNode+".maxWeightLen") $maxLen;
	connectAttribute($orgCage[0], "worldMesh", $reductionNode, "cages[0]");
	connectAttribute($orgObj[0], "worldMesh", $reductionNode, "poses[0]");
	
	// connect attributes
	int $len = `size($cages)`;
	int $i;
	for($i=0; $i<$len; $i++)
	{
		string $cageStr = "cages["+string($i+1)+"]";
		string $poseStr = "poses["+string($i+1)+"]";
		// if(isTriangular($poses[$i])==0)
			// polyTriangulate -ch 1 $poses[$i];
		connectAttribute($cages[$i], "worldMesh", $reductionNode, $cageStr);
		connectAttribute($poses[$i], "worldMesh", $reductionNode, $poseStr);
	}	
	connectAttribute($orgObj[0], "worldMesh", $coordNode, "objectMesh");
	connectAttribute($orgCage[0], "worldMesh", $coordNode, "cageMesh");
	connectAttribute($cage, "worldMesh", $cageDeformerNode, "cageMesh");
	connectAttribute($coordNode, "mixedOutput", $reductionNode, "mixedInput");
	connectAttribute($reductionNode, "reducedOutput", $cageDeformerNode, "mixedInput");
}

// update an existing weight reduction node
global proc updateWeightReduction(string $reducer, int $s, int $type, float $ratio, int $maxLen, string $exp_cages[], string $exp_objects[])
{
	string $out[] = getConnection($reducer, "reducedOutput", 1, 0);
	disconnectAttribute($reducer, "reducedOutput", $out[0], $out[1]);
	setAttr ($reducer+".reductionRatio") $ratio;
	setAttr ($reducer+".reducerType") $type;
	setAttr ($reducer+".maxWeightLen") $maxLen; 
	string $examples[] = getReducerExamples($reducer);
	int $num = size($examples)/2;
	int $i;
	for($i=0; $i<$num; $i++) // disconnect
	{
		disconnectAttribute($examples[$i*2], "worldMesh", $reducer, "cages["+$i+"]");
		disconnectAttribute($examples[$i*2+1], "worldMesh", $reducer, "poses["+$i+"]");
	}
	$num = size($exp_cages);
	for($i=0; $i<$num; $i++) // connect
	{
		connectAttribute($exp_cages[$i], "worldMesh", $reducer,  "cages["+$i+"]");
		connectAttribute($exp_objects[$i], "worldMesh", $reducer,  "poses["+$i+"]");
	}
	connectAttribute($reducer, "reducedOutput", $out[0], $out[1]);
}

//////////////////////////////////////////////////////////////////////////////////////
//
// callback functions
//
//////////////////////////////////////////////////////////////////////////////////////
// callback function to 'Reduce Weights' button to be checked in
global proc reduceOn_edit_cb()
{
	frameLayout -edit -enable on -collapse off weightRedFrame;
}

// callback function to 'Reduce Weights' button to be checked out
global proc reduceOff_edit_cb()
{
	frameLayout -edit -enable off -collapse on weightRedFrame;
}

// callback function to 'Mean Value' selected
global proc mvcSelect_edit_cb()
{
	checkBox -edit -enable on reduceCheckButton;
}

// callback function to ''Mean Value' unselected
global proc mvcUnselect_edit_cb()
{
	intSliderGrp -edit -enable off cageDeformerHCSideSliderGrp;
	checkBox -edit -enable off -value 0 reduceCheckButton;
	reduceOff_cb();
}

// callback function to 'Harmonic' selected
global proc hcSelect_edit_cb()
{
	intSliderGrp -edit -enable on cageDeformerHCSideSliderGrp;
	checkBox -edit -enable on reduceCheckButton;
}

// callback function to 'Harmonic' unselected
global proc hcUnselect_edit_cb()
{
	intSliderGrp -edit -enable off cageDeformerHCSideSliderGrp;
	checkBox -edit -enable off -value 0 reduceCheckButton;
	reduceOff_edit_cb();
}

// callback function to select example cage in the scroll list
global proc select_cage_view_edit_cb()
{
	int $id[] = `textScrollList -q -selectIndexedItem exampleCageTexts`;	
	textScrollList -edit -selectIndexedItem $id[0] examplePoseTexts;
	string $sel_cage[] = `textScrollList -q -allItems exampleCageTexts`;
	string $sel_pose[] = `textScrollList -q -allItems examplePoseTexts`;
	select `longNameOf($sel_pose[$id[0]-1])`;
	select -tgl `longNameOf($sel_cage[$id[0]-1])`;
}

// callback function to select example pose in the scroll list
global proc select_obj_view_edit_cb()
{
	int $id[] = `textScrollList -q -selectIndexedItem examplePoseTexts`;
	textScrollList -edit -selectIndexedItem $id[0] exampleCageTexts;
	string $sel_cage[] = `textScrollList -q -allItems exampleCageTexts`;
	string $sel_pose[] = `textScrollList -q -allItems examplePoseTexts`;
	select `longNameOf($sel_pose[$id[0]-1])`;
	select -tgl `longNameOf($sel_cage[$id[0]-1])`;
}

// callback function to append selected objects to 
global proc append_example_edit_cb(string $objTexts, string $cageTexts)
{
	string $sel[] = getTwoSelected();
	int $t_0[] = `polyEvaluate -t $sel[0]`;
	int $t_1[] = `polyEvaluate -t $sel[1]`;
	if($t_0[0] < $t_1[0])
	{
		string $ans = `confirmDialog -title "Warning" -message "Selection order may be wrong, continue?" -button "Continue" -button "Cancel" 
						     -defaultButton "Continue" -cancelButton "Cancel" -dismissString "No"`;
		if($ans == "Cancel")
			return;
	}
	string $ex_obj = `textField -q -text objectText`;
	string $ex_cage = `textField -q -text cageText`;
	if($sel[0] == $ex_obj || $sel[1] == $ex_cage)
	{
		confirmDialog -title "Error" -message "examples should be different from Object and Cage" -button "Yes" -button "No" 
						     -defaultButton "Yes" -cancelButton "No" -dismissString "No";
		return;
	}
	string $ex_exp_obj[] = `textScrollList -q -allItems $objTexts`;
	string $ex_exp_cage[] = `textScrollList -q -allItems $cageTexts`;
	if(stringArrayContains($sel[0], $ex_exp_obj) + stringArrayContains($sel[1], $ex_exp_cage) > 0)
	{
		confirmDialog -title "Error" -message "at least one object exists" -button "Yes" -button "No" 
							 -defaultButton "Yes" -cancelButton "No" -dismissString "No";
		return;
	}
	textScrollList -edit -append $sel[0] $objTexts;
	textScrollList -edit -append $sel[1] $cageTexts;
}

// callback function to remove selected item
global proc remove_example_edit_cb()
{
	int $id[] = `textScrollList -q -selectIndexedItem examplePoseTexts`;
	textScrollList -edit -rii $id[0] exampleCageTexts;
	textScrollList -edit -rii $id[0] examplePoseTexts;
}

// callback function to Apply button, applying the editing
global proc apply_cb()
{
	global string $cageDeformerName_edit;
	global int $cage_deformer_edited;
	int $doReduce = `checkBox -q -value reduceCheckButton`;
	string $conns[] = getCageDeformerConnections($cageDeformerName_edit);
	string $obj = $conns[0];
	string $cage = $conns[1];
	string $coord = $conns[2];
	string $cageMeshBase[] = getConnection($coord, "cageMesh", 0, 1);
	string $objMeshBase[] = getConnection($coord, "objectMesh", 0, 1);
	if($doReduce==0)
	{		
		int $enclosed = getAttr ($coord+".enclose");
		int $m = `radioButtonGrp -q -sl typeButton`;
		$m--;
		int $s = 5;
		if($m == 1) 
			$s = `intSliderGrp -q -value cageDeformerHCSideSliderGrp`;
		if(`nodeType $cageDeformerName_edit`=="olmReducedCage")	
		{
			string $reducer = $conns[3];			
			delete $cageDeformerName_edit;
			delete $cageMeshBase[0];
			delete $objMeshBase[0];
		}
		olmCageDeformer -cg $cage -tg $obj -t $m -al 0 -r on -sg $s;
	}
	else
	{		
		int $m = 1;
		int $s = `intSliderGrp -q -value cageDeformerHCSideSliderGrp`;
		int $type = `optionMenu -q -sl reductionTypeMenu`;
		float $ratio = `floatSliderGrp -q -value reductionRatioSliderGrp`;
		int $maxLen = `intSliderGrp -q -value weightAmountSliderGrp`;
		string $cages[] = `textScrollList -q -allItems exampleCageTexts`;
		string $poses[] = `textScrollList -q -allItems examplePoseTexts`;		
		if(`nodeType $cageDeformerName_edit`=="olmCage")
		{
			if(`nodeType $coord`=="olmHarmonicCoordinates")
				insertWeightReduction($cageDeformerName_edit, $s, $type, $ratio, $maxLen, $cages, $poses);
			else
			{
				delete $cageDeformerName_edit;
				delete $cageMeshBase[0];
				delete $objMeshBase[0];
				createWeightReduction($obj, $cage, $s, $type, $ratio, $maxLen, $cages, $poses);
			}
		}
		else
		{
			if(size($cages)==0 || size($poses)==0)
			{
				confirmDialog -title "Error" -message "examples can not be empty" -button "Yes" -button "No" 
								 -defaultButton "Yes" -cancelButton "No" -dismissString "No";
				return;
			}
			string $reducer = $conns[3];
			updateWeightReduction($reducer, $s, $type, $ratio, $maxLen, $cages, $poses);
		}
	}
	$cage_deformer_edited = 1;
}

// callback function to OK button, applying the editing then close the window
global proc ok_cb()
{
	global int $cage_deformer_edited;
	if($cage_deformer_edited==0)
		apply_cb();
	deleteUI editCageWindow;
	$cage_deformer_edited = 0;
}

//////////////////////////////////////////////////////////////////////////////////////
//
// edit cage deformer, UI, ...
//
//////////////////////////////////////////////////////////////////////////////////////
// UI
global proc create_ui()
{
	if(`window -exists editCageWindow`==1)
		deleteUI editCageWindow;
	window -resizeToFitChildren 1 -title "Edit Cage Deformer" editCageWindow;
	columnLayout;
		frameLayout -label "Deformer" -width 400 -borderStyle "out";
			textField -width 80 deformerText;
		setParent;
		frameLayout -label "Object and Cage" -borderStyle "out";
			columnLayout;
				rowLayout -numberOfColumns 2;
					text -label "Object" -width 200 -align "left";
					text -label "Cage" -align "right";
				setParent ..;
				rowLayout -numberOfColumns 2;
					textField -width 195 objectText;
					textField -width 195 cageText;					
				setParent ..;				
			setParent;
		setParent;
		frameLayout -label "Binding Type" -width 400 -borderStyle "out";
			columnLayout;
				rowLayout -numberOfColumns 5;
					radioButtonGrp -numberOfRadioButtons 3 -cw1 5 -labelArray3 "MeanValue" "Harmonic" "Green" 
					    -onCommand1 "mvcSelect_edit_cb" -offCommand1 "mvcUnselect_edit_cb"
						-onCommand2 "hcSelect_edit_cb" -offCommand2 "hcUnselect_edit_cb" typeButton;
				setParent ..;
				intSliderGrp -label "segment" -field true -minValue 5 -maxValue 8 -value 6 cageDeformerHCSideSliderGrp;
				checkBox -label "Reduce Weights" -onCommand "reduceOn_edit_cb" -offCommand "reduceOff_edit_cb" reduceCheckButton;
			setParent ..;
		setParent ..;
		frameLayout -label "Weight Reduction" -width 400 -collapsable on -borderStyle "out" weightRedFrame;
			columnLayout;
				rowLayout -numberOfColumns 2;
					text -label "Poses" -width 195 -align "left";
					text -label "Cages" -width 195 -align "left";					
				setParent ..;
				rowLayout -numberOfColumns 2;
					textScrollList -numberOfRows 6 -allowMultiSelection false -width 195 -height 100 
						-selectCommand "select_obj_view_edit_cb" examplePoseTexts;
					textScrollList -numberOfRows 6 -allowMultiSelection false -width 195 -height 100 
						-selectCommand "select_cage_view_edit_cb" exampleCageTexts;					
				setParent ..;
				rowLayout -numberOfColumns 2;
					button -label "Append" -width 80 -command "append_example_edit_cb examplePoseTexts exampleCageTexts";
					button -label "Remove" -width 80 -command "remove_example_edit_cb";
				setParent ..;
				text -label "";
				text -label "Parameters" -fn boldLabelFont;
				optionMenu -label "Reduction Method" -enable 1 reductionTypeMenu;
							menuItem -label "Largest";
							menuItem -label "Geometry";
							menuItem -label "Poisson";
				floatSliderGrp -label "Percentage" -field true -minValue 92.0 -maxValue 99.9 
					-fieldMinValue 98.0 -fieldMaxValue 99.9 -step 0.1 -value 92.0 reductionRatioSliderGrp;
				intSliderGrp -label "Max Weight" -field true -minValue 8 -maxValue 30 -value 8 weightAmountSliderGrp;
			setParent ..;
		setParent ..;
		rowLayout -numberOfColumns 3;
			button -label "OK" -width 80 -command "ok_cb";
			button -label "Apply" -width 80 -command "apply_cb";
			button -label "Close" -width 80 -command "deleteUI editCageWindow";
		setParent ..;		
	setParent ..;	
	showWindow;
}

// edit UI
global proc edit_ui(string $defm, string $cage, string $obj, string $coord, int $bind, int $isReduced, string $example_cages[],
					string $example_poses[], int $redType, float $perc, int $max)
{
	textField -edit -text $defm -enable off deformerText;
	textField -edit -text $obj -enable off objectText;
	textField -edit -text $cage -enable off cageText;
	radioButtonGrp -edit -sl $bind typeButton;
	if($bind==1)
	{
		checkBox -edit -enable on -value $isReduced reduceCheckButton;
		intSliderGrp -edit -enable off -value 6 cageDeformerHCSideSliderGrp;
		reduceOff_edit_cb();
	}
	else if($bind==2)
	{
		checkBox -edit -enable on -value $isReduced reduceCheckButton;
		int $seg = `getAttr ($coord+".segment")`;
		intSliderGrp -edit -value $seg cageDeformerHCSideSliderGrp;
		if($isReduced!=0)
		{
			reduceOn_edit_cb();
			optionMenu -edit -sl $redType reductionTypeMenu;
			floatSliderGrp -edit -value $perc reductionRatioSliderGrp;
			intSliderGrp -edit-value $max weightAmountSliderGrp;
			int $num = size($example_poses);
			int $i;
			for($i=0; $i<$num; $i++)
			{
				textScrollList -edit -append $example_poses[$i] examplePoseTexts;
				textScrollList -edit -append $example_cages[$i] exampleCageTexts;
			}
		}
		else
			reduceOff_edit_cb();
	}
	else
	{
		intSliderGrp -edit -enable off -value 6 cageDeformerHCSideSliderGrp;
		checkBox -edit -enable off -value 0 reduceCheckButton;
		reduceOff_edit_cb();
	}	
}



// edit
global proc edit_cageDeformer(string $cageDefm, string $type)
{
	string $conns[] = getCageDeformerConnections($cageDefm);
	string $influence = $conns[0];
	string $cage = $conns[1];
	string $coord = $conns[2];
	string $bindType = `nodeType $coord`;
	int $bind=0; 
	int $isReduced=0;
	if($bindType == "olmMeanValueCoordinates")
		$bind = 1;
	else if($bindType == "olmHarmonicCoordinates")
		$bind = 2;
	else if($bindType == "olmGreenCoordinates")
		$bind = 3;
	else
		error "wrong binding type";
	string $reducer = "";
	if($type == "olmReducedCage")
	{
		$reducer = $conns[3];
		$isReduced = 1;
	}
	string $examples[] = getReducerExamples($reducer);
	string $exp_cages[];
	string $exp_poses[];
	int $redType = 0; 
	float $perc = 0.0;
	int $max = 0;
	int $num = size($examples)/2;	
	if(size($examples)>0)
	{
		int $i;
		for($i=0; $i<$num; $i++)
		{
			$exp_cages[$i] = $examples[2*$i];
			$exp_poses[$i] = $examples[2*$i+1];
		}
		$perc = `getAttr ($reducer+".reductionRatio")`;
		$redType = `getAttr ($reducer+".reducerType")`;
		$max = `getAttr($reducer+".maxWeightLen")`;
	}
	create_ui();
	edit_ui($cageDefm, $cage, $influence, $coord, $bind, $isReduced, $exp_cages, $exp_poses, 
			$redType, $perc, $max);
}

global proc olm_ui_editCageDeformer()
{
	global  string $cageDeformerName_edit;
	string $sl[] = `ls -sl`;
	if(size($sl)<1)
		error "Please select the cage mesh connecting with the deformer you want to edit";
	string $out = getConnectedNode($sl[0], "worldMesh", 1, 0);
	string $type = `nodeType $out`;
	if($type != "olmCage" && $type != "olmReducedCage")
		error "The selected cage is not connected to a cage deformer";
	string $cageDeformerName_edit = $out;
	edit_cageDeformer($cageDeformerName_edit, $type);
}
olm_ui_editCageDeformer();